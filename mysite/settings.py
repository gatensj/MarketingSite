"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import environ
import os

root = environ.Path(__file__) - 3 # three folder back (/a/b/c/ - 3 = /)
env = environ.Env(DEBUG=(bool, False),) # set default values and casting

SITE_ROOT = root()

if 'ENV' in os.environ and os.environ['ENV'] in ('dev', 'prod'):
    ENVIRONMENT = os.environ['ENV']
else:
    ENVIRONMENT = "dev"

environ.Env.read_env(
    '{0}/mysite/config/settings/{1}.env'.format(
        SITE_ROOT,
        ENVIRONMENT,
    )
)


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


####################################################################################
with open('mysite/secrets/secret_key.txt') as a:
    SECRET_KEY = a.read().strip()
'''
SECRET_KEY = env('SECRET_KEY', default='NOTASECRETKEY')
'''

# SECURITY WARNING: don't run with debug turned on in production! # DEBUG = False
DEBUG = True
####################################################################################


ALLOWED_HOSTS = ['vagrant.wharton.upenn.edu', 'localhost', 'marketingbye.com', 'opoa7vxe2l.execute-api.us-east-1.amazonaws.com']

SITE_ID = 2

PREREQ_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'taggit',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'tinymce',
    'modelcluster',
    'redactor',
    'homepage',
    'photologue',
    'sortedm2m',
    'storages',
    'zappa_django_utils',
    'wagtail.wagtailcore',
    'wagtail.wagtailadmin',
    'wagtail.wagtaildocs',
    'wagtail.wagtailsnippets',
    'wagtail.wagtailusers',
    'wagtail.wagtailimages',
    'wagtail.wagtailembeds',
    'wagtail.wagtailsearch',
    'wagtail.wagtailsites',
    'wagtail.wagtailredirects',
    'wagtail.wagtailforms',
]

WAGTAIL_CONTRIB_APPS = [
    'wagtailcodeblock',
    'wagtailcontentstream',
    'wagtailemoji',
    'wagtailerrorpages',
    'wagtailfontawesome',
    'wagtailgridder',
    'wagtail.contrib.table_block',
    'wagtail.contrib.modeladmin',
    'wagtail.contrib.settings',
    'wagtailtinymce',
]

PROJECT_APPS = [
    'cms',
    'cms.home',
]

INSTALLED_APPS = PREREQ_APPS + WAGTAIL_CONTRIB_APPS + PROJECT_APPS

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.PersistentRemoteUserMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'wagtail.wagtailcore.middleware.SiteMiddleware',
    'wagtail.wagtailredirects.middleware.RedirectMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

WAGTAIL_SITE_NAME = 'MarketingByE'


########################################################################################################################################################################

####################################################################################
#AWS settings
'''
# The AWS region to connect to.
AWS_REGION = env('AWS_REGION', default='NOTAWS_REGION')

# The AWS access key to use.
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default='NOTAWS_ACCESS_KEY_ID')

# The AWS secret access key to use.
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default='NOTAWS_SECRET_ACCESS_KEY')
'''
####################################################################################




####################################################################################
#Figure this out - multiple mediator regression model
with open('mysite/secrets/aws_region.txt') as b1:
    AWS_REGION = b1.read().strip()

with open('mysite/secrets/aws_access_key_id.txt') as b2:
    AWS_ACCESS_KEY_ID = b2.read().strip()

with open('mysite/secrets/aws_secret_access_key.txt') as b3:
    AWS_SECRET_ACCESS_KEY = b3.read().strip()

AWS_S3_SECURE_URLS = False

AWS_STORAGE_BUCKET_NAME = 'marketingbye122222017'

AWS_S3_CUSTOM_DOMAIN = 'marketingbye122222017.s3-website-us-east-1.amazonaws.com/mysite'

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = '/blog/static'

AWS_S3_FILE_OVERWRITE = False

STATIC_URL = 'http://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)

STATIC_ROOT = os.path.join(BASE_DIR, '/blog/static/')

STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

STATICFILES_LOCATION = 'blog/static'

MEDIAFILES_LOCATION = 'mysite/uploads'

DEFAULT_FILE_STORAGE = 'mysite.custom_storages.MediaStorage'

MEDIA_URL = "http://marketingbye122222017.s3-website-us-east-1.amazonaws.com/mysite/uploads/"

MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), "uploads")

#BASE_DIR_MEDIA = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
#AWS_S3_CUSTOM_DOMAIN_MEDIA = 'marketingbye122222017.s3-website-us-east-1.amazonaws.com'
#AWS_MEDIA_LOCATION = 'uploads'
#MEDIA_URL = 'http://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN_MEDIA, AWS_MEDIA_LOCATION)
#MEDIA_ROOT = os.path.join(BASE_DIR_MEDIA, '/uploads/')

####################################################################################




####################################################################################
#DB var settings
with open('mysite/secrets/db_name.txt') as b:
    DB_NAME = b.read().strip()

with open('mysite/secrets/db_user.txt') as c:
    DB_USER = c.read().strip()

with open('mysite/secrets/db_pw.txt') as d:
    DB_PW = d.read().strip()

'''
DB_NAME = env('DB_NAME', default='NOTDB_NAME')

DB_USER = env('DB_USER', default='NOTDB_USER')

DB_PW = env('DB_PW', default='NOTDB_PW')
'''

'''
DATABASES = {
    'default': {
        'ENGINE': 'zappa_django_utils.db.backends.s3sqlite',
        'NAME': 'db.sqlite3',
        'BUCKET': 'marketingbye122222017'
    }
}


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PW,
        'HOST': 'vagrant.wharton.upenn.edu',
        'PORT': '5432',
    }
}



'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'd6o38vi3bbc816',
        'USER': 'cvktirvknoegwl',
        'PASSWORD': '52ac8989367c280f17638a45fbaf0310aeb604916bf320f44701db12e29d4e21',
        'HOST': 'ec2-107-21-109-15.compute-1.amazonaws.com',
        'PORT': '5432',
    }
}

####################################################################################




####################################################################################
# EMAIL SETUP
with open('mysite/secrets/email_host.txt') as e:
    EMAIL_HOST = e.read().strip()

with open('mysite/secrets/email_host_user.txt') as f:
    EMAIL_HOST_USER = f.read().strip()

with open('mysite/secrets/email_pw.txt') as g:
    EMAIL_HOST_PASSWORD = g.read().strip()

'''
EMAIL_HOST = env('EMAIL_HOST', default='NOTEMAIL_HOST')

EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='NOTEMAIL_HOST_USER')

EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='NOTEMAIL_HOST_PASSWORD')
'''

EMAIL_PORT = 587

EMAIL_USE_TLS = True
####################################################################################

########################################################################################################################################################################


AUTH_PASSWORD_VALIDATORS = [
   {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

TINYMCE_JS_ROOT = os.path.join(STATIC_ROOT, "tiny_mce")

TINYMCE_JS_URL = os.path.join(TINYMCE_JS_ROOT, "tiny_mce.js")

TINYMCE_DEFAULT_CONFIG = {
    'plugins': "table,spellchecker,paste,searchreplace",
    'theme': "advanced",
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 10,
}

TINYMCE_SPELLCHECKER = True

TINYMCE_COMPRESSOR = True

REDACTOR_OPTIONS = {'lang': 'en'}

REDACTOR_UPLOAD = MEDIA_ROOT

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.solr_backend.SolrEngine',
        'URL': 'http://vagrant.upenn.edu/solr/blog'
    },
}


# IF DEBUG IS TRUE Setup
if DEBUG is True:
    # For Wharton internal IPs
    INTERNAL_IPS = ('127.0.0.1', '192.168.99.1')

    def show_toolbar(request):
        return True

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": show_toolbar,
        # "INTERCEPT_REDIRECTS": True,
    }

    INSTALLED_APPS += (
        'debug_toolbar',
    )

    MIDDLEWARE_CLASSES += [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]

